qualityEnthalpyT(0.9, h = 3)
q()
read.table
read.table?
read.table?
?read.table
getwd()
setwd("C:\Users\Bear\Documents\R\RootsAssignment")
setwd("C:/Users/Bear/Documents/R/RootsAssignment")
ls()
getwd()
dir()
x = 1; y = 2
x
y
csvPath = "sample_trip.csv"; rdsPath = "sample_trip.rds"
csvPath
rdsPath 
readRDS(rdsPath, refhook = NULL)
readRDS(rdsPath, refhook = NULL)[[1]]
readRDS(rdsPath, refhook = NULL)
data = readRDS(rdsPath, refhook = NULL)
data
type(data[[1]]
type(data)
typeof(data)
typeof(data[[1]])
typeof(data[[2]])
typeof(data[[3]])
typeof(data[[4]])
typeof(data[[4]])
typeof(data[[1]])
typeof(data[[2]])
data = readRDS(rdsPath, refhook = NULL)
?readRDS
data
data
head(data)
data$accuracy
x=1
x=1;
plot(data$speed)
plot(data$speed[1:100])
plot(data$speed[0:100])
plot(data$speed)
plot(data$speed * 2.23694)
plot(data$speed[1400:1500])
velMPH = data$speed * 2.23694
plot(velMPH[1400:1500])
plot(velMPH[1300:1500])
plot(velMPH[1100])
plot(velMPH[1:100])
plot(velMPH[1400:1500])
plot(velMPH[1400:1420])
plot(velMPH[1:1500])
plot(data$timestamp)
plot(data$accuracy)
plot(data$latitude)
plot(data$longitude)
plot(data$accuracy)
plot(data$heading)
plot(data$accuracy)
plot(data$accuracy)
plot(data$accuracy)
plot(data$accuracy); plot(data$heading);  plot(data$latitude); plot(data$longitude); plot(data$speed); plot(data$timestamp) 
library(ggplot2)
load.package(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
?qplot
qplot
qplot(data$heading)
qplot(data$speed)
X <- c(1, 2, 3, 4, 5, 6, 7)
Y1 <- c(2, 4, 5, 7, 12, 14, 16)
Y2 <- c(3, 6, 7, 8, 9, 11, 12)
Y3 <- c(1, 7, 3, 2, 2, 7, 9)
par(mfrow=c(2,3))
plot(X,Y1, pch = 1)
plot(X,Y2, pch = 2)
plot(X,Y3, pch = 3)
plot(X,Y1, pch = 4)
plot(X,Y2, pch = 15)
plot(X,Y3, pch = 16)
plot(X,Y3, pch = 16)
plot(X,Y3, pch = 16)
plot(X,Y3, pch = 16)
plot(X,Y3, pch = 16)
plot(X,Y3, pch = 16)
plot(X,Y3, pch = 16)
plot(X,Y3, pch = 16)
plot(X,Y3, pch = 20)
plot(X,Y3, pch = 1)
plot(X,Y3, pch = 2)
plot(X,Y3, pch = 3)
par(mfrow=c(2,3))
plot(data$speed, pch = 3)
plot(data$speed, pch = 1)
plot(data$speed, pch = 4)
plot(data$speed, pch = 17)
plot(data$speed, pch = 16)
plot(data$speed, pch = 20)
plot(data$speed, pch = 21)
plot(data$speed, pch = 20)
plot(data$speed, pch = 20)
lines()
lines(data$speed)
lines(data$speed)
plot(data$speed, pch = 20)
lines(data$speed)
par(mfrow=c(2,3))
par(mfrow=c(2,3))
setwd("C:/Users/Bear/Documents/R/RootsAssignment")
csvPath = "sample_trip.csv"; rdsPath = "sample_trip.rds"
data = readRDS(rdsPath);
par(mfrow=c(2,3))
for (i in 1:length(data)) { plot(data[[i]], pch = 20) }
data[[i]]
plot(data$speed)
setwd("C:/Users/Bear/Documents/R/RootsAssignment")
csvPath = "sample_trip.csv"; rdsPath = "sample_trip.rds"
data = readRDS(rdsPath);
par(mfrow=c(2,3))
for (i in 1:length(data)) { plot(data[[i]], pch = 20) }
names(data)
?plot
setwd("C:/Users/Bear/Documents/R/RootsAssignment")
csvPath = "sample_trip.csv"; rdsPath = "sample_trip.rds"
data = readRDS(rdsPath);
par(mfrow=c(2,3))
for (i in 1:length(data)) { plot(data[[i]], pch = 20, xlab = names(data[i]) }
setwd("C:/Users/Bear/Documents/R/RootsAssignment")
csvPath = "sample_trip.csv"; rdsPath = "sample_trip.rds"
data = readRDS(rdsPath);
par(mfrow=c(2,3))
for (i in 1:length(data)) { plot(data[[i]], pch = 20, xlab = names(data[i])) }
setwd("C:/Users/Bear/Documents/R/RootsAssignment")
csvPath = "sample_trip.csv"; rdsPath = "sample_trip.rds"
data = readRDS(rdsPath);
par(mfrow=c(2,3))
for (i in 1:length(data)) { plot(data[[i]], pch = 20, xlab = names(data[i]), ylab = "Index Row" ) }
setwd("C:/Users/Bear/Documents/R/RootsAssignment")
csvPath = "sample_trip.csv"; rdsPath = "sample_trip.rds"
data = readRDS(rdsPath);
par(mfrow=c(2,3))
for (i in 1:length(data)) { plot(data[[i]], pch = 20, xlab = "Index  Row", ylab = names(data[i]) ) }
data$speed
for (i in 1:length(data$speed)) { 1:1000 } 
for (i in 2:length(data$speed)) { data[[7]][i] = data$speed[i] - data$speed[i - 1] } 
for (i in 2:length(data$speed)) { data[[7]][i] = data$speed[i] - data$speed[i - 1] } 
for (i in 2:length(data$speed)) { data[[7]][i] = data$speed[i] - data$speed[i - 1] } 
for (i in 2:length(data$speed)) { 
data[[7]][i] = data$speed[i] - data$speed[i - 1]
}
for (i in 2:length(data$speed)) { 
data[[7]][i] = data$speed[i] - data$speed[i - 1]
print(data$speed[i] - data$speed[i - 1])
}
for (i in 2:length(data$speed)) { 
acc = data$speed[i] - data$speed[i - 1]
print(acc)
}
acc = numeric()
for (i in 2:length(data$speed)) { 
acc[i] = data$speed[i] - data$speed[i - 1]
print(acc)
}
acc = numeric()
for (i in 2:length(data$speed)) { 
acc[i] = data$speed[i] - data$speed[i - 1]
}
acc = 0
for (i in 2:length(data$speed)) { 
acc[i] = data$speed[i] - data$speed[i - 1]
}
plot(acc)
acc = 0
for (i in 2:length(data$speed)) { 
acceleration[i] = data$speed[i] - data$speed[i - 1]
}
acceleration = 0
for (i in 2:length(data$speed)) { 
acceleration[i] = data$speed[i] - data$speed[i - 1]
}
acceleration = 0
for (i in 2:length(data$speed)) { 
acceleration[i] = data$speed[i] - data$speed[i - 1]
}
acceleration
plot(acceleration)
min(acceleration)
head(acceleration)
data$speed
?par
for (i in 2:length(data$speed)) { acceleration[i] = data$speed[i] - data$speed[i - 1] }
par(mfrow=c(1,1))
plot(xlab = "Index  Row", ylab = names(data[i])) 
plot(acceleration,xlab = "Index Row", ylab = names(data[i])) 
acceleration = 0
for (i in 2:length(data$speed)) { acceleration[i] = data$speed[i] - data$speed[i - 1] }
par(mfrow=c(1,1))
plot(acceleration,xlab = "Index Row", ylab = "Acceleration") 
which(is.na(data$speed))
which(is.na(data$longitude))
which(is.na(data$heading))
lapply
?lapply
findNa <- function(x) {  
which(is.na(x))
}
lapply(data)
findNa <- function(x) {  
which(is.na(x))
}
lapply(data, findNa)
?is.nan
findNa <- function(x) {  
print(“na”)
which(is.na(x))
print(“nan”)
which(is.nan(x))
}
lapply(data, findNa)
findNa <- function(x) {  
print(“na”)
which(is.na(x))
print(“nan”)
which(is.nan(x))
}
lapply(data, findNa)
print("x")
print("nan")
findNa <- function(x) {  
print(“na”)
which(is.na(x))
print(“nan”)
which(is.nan(x))
}
is.numeric(na)
data$speed[899]
is.numeric(NA)
is.numeric(NAN)
is.numeric(NaN)
plot(Inf)
plot(c(data$speed, Inf))
is.finite(NaN)
is.finite(Inf)
is.finite(1)
findNa <- function(x) {  
"Is numeric?"
which(is.numeric(x))
"Is finite? (Not nan or inf)"
which(is.finite(x))
}
lapply(data, findNa)
findNa <- function(x) {  
"Isn't numeric?"
which(!is.numeric(x))
"Isn't finite? (Not nan or inf)"
which(!is.finite(x))
}
lapply(data, findNa)
findNa(data$speed)
findNa <- function(x) {  
print("Isn't numeric?")
which(!is.numeric(x))
print("Isn't finite? (Not nan or inf)")
which(!is.finite(x))
}
lapply(data, findNa)
findNa <- function(x) {  
print("Isn't numeric?")
print(which(!is.numeric(x)))
print("Isn't finite? (Not nan or inf)")
print(which(!is.finite(x)))
}
lapply(data, findNa)
findNa <- function(x) {  
print("Isn't numeric?")
print(which(!is.numeric(x)))
print("Isn't finite? (Not nan or inf)")
print(which(!is.finite(x)))
return()
}
lapply(data, findNa)
findNa <- function(x) {  
print(names(x))
print("Isn't numeric?")
print(which(!is.numeric(x)))
print("Isn't finite? (Not nan or inf)")
print(which(!is.finite(x)))
}
lapply(data, findNa)
names(data$speed)
names(data[[1]])
name(data[[1]])
name(data[[1]])
data[[1]]
?lapply
x
findNa <- function(x) {  
return(paste("Isn't numeric?",which(!is.numeric(x)), "Isn't finite? (Not nan or inf)",which(!is.finite(x))))
}
lapply(data, findNa)
list(1,2)
findNa <- function(x) { 
return(list("Isn't numeric?", which(!is.numeric(x)),  "Isn't finite? (Not nan or inf)", which(!is.finite(x)))
}
lapply(data, findNa)
findNa <- function(x) { 
return(list("Isn't numeric?", which(!is.numeric(x)),  "Isn't finite? (Not nan or inf)", which(!is.finite(x))))
}
lapply(data, findNa)
print(1:10)
findNa <- function(x) {  
return(paste("Isn't numeric?",which(!is.numeric(x)), "Isn't finite? (Not nan or inf)",which(!is.finite(x))))
}
lapply(data, findNa)
paste("hi", 1)
paste("hi", 1:10)
findNa <- function(x) {  
return(paste("Isn't numeric?",which(!is.numeric(x)), "Isn't finite? (Not nan or inf)",which(!is.finite(x))))
}
lapply(data, findNa)
data$speed(899)
findNa <- function(x) {  
return(paste("Isn't numeric?",which(!is.numeric(x)), "Isn't finite? (Not nan or inf)",which(!is.finite(x))))
}
lapply(data, findNa)
data$speed[899]
findNa <- function(x) {  
return(paste("Isn't numeric?",which(!is.numeric(x)), "Isn't finite?",which(!is.finite(x))))
}
lapply(data, findNa)
data$speed[899]
installinstall.package("geosphere")
library(geosphere)
install.package("geosphere")
library(geosphere)
install.package("geosphere")
library(geosphere)
install.package(geosphere)
library(geosphere)
install.packages(geosphere)
library(geosphere)
install.packages("geosphere")
library(geosphere)
?distm
?distMeeus
?distRhumb
?distm
data$longitude
coordinateVelocity = 0
for (i in 2:length(data$speed)) { 
coordinateVelocity[i] = distm(c(data$longitude[i], data$latitude[i]), c(data$longitude[i - 1], data$latitude[i - 1])) 
}
plot(acceleration,xlab = "Index Row", ylab = "Acceleration")
plot(coordinateVelocity,xlab = "Index Row", ylab = "Acceleration")
install.packages("geosphere")
library(geosphere)
coordVelocity = 0
for (i in 2:length(data$speed)) { 
coordVelocity[i] = distm(c(data$longitude[i], data$latitude[i]), c(data$longitude[i - 1], data$latitude[i - 1])) 
}
plot(coordVelocity,xlab = "Index Row", ylab = "Acceleration") 
yout = y < 100
yout
plot(coordVelocity[coordVelocity < 100],xlab = "Index Row", ylab = "Acceleration") 
GPSVelocity = 0
for (i in 2:length(data$speed)) { 
GPSVelocity[i] = distm(c(data$longitude[i], data$latitude[i]), c(data$longitude[i - 1], data$latitude[i - 1])) 
}
par(mfrow(c(2,1))
plot(coordVelocity[coordVelocity < 100],xlab = "Index Row", ylab = "Velocity from GPS") 
par(mfrow(c(2,1))
plot(GPSVelocity[GPSVelocity < 100],xlab = "Index Row", ylab = "Velocity from GPS") 
par(mfrow= c(2,1))
plot(GPSVelocity[GPSVelocity < 100],xlab = "Index Row", ylab = "Velocity from GPS") 
par(mfrow= c(1,2))
plot(GPSVelocity[GPSVelocity < 100],xlab = "Index Row", ylab = "Velocity from GPS") 
plot(data$speed,xlab = "Index Row", ylab = "Velocity") 
par(mfrow= c(1,1))
plot(GPSVelocity[GPSVelocity < 100], data$speed[GPSVelocity < 100], xlab = "Velocity", ylab = "Velocity from GPS") 
par(mfrow= c(1,2))
plot(GPSVelocity[GPSVelocity < 100],xlab = "Index Row", ylab = "Velocity from GPS") 
plot(data$speed,xlab = "Index Row", ylab = "Velocity") 
par(mfrow= c(1,1))
plot(GPSVelocity[GPSVelocity < 100], data$speed[GPSVelocity < 100], xlab = "Velocity", ylab = "Velocity from GPS") 
par(mfrow= c(1,1))
plot(GPSVelocity[GPSVelocity < 100], data$speed[GPSVelocity < 100], ylab = "Velocity", xlab = "Velocity from GPS") 
abline(lm(df$VAR2~df$VAR1), col="red")
abline(lm(df$VAR2GPSVelocity[GPSVelocity < 100]~GPSVelocity[GPSVelocity < 100]df$VAR1), col="red")
abline(lm(df$VAR2GPSVelocity[GPSVelocity < 100]~GPSVelocity[GPSVelocity < 100]), col="red")
abline(lm(GPSVelocity[GPSVelocity < 100]~GPSVelocity[GPSVelocity < 100]), col="red")
?abline
lsfit
?lsfit
abline(lsfit(GPSVelocity[GPSVelocity < 100]~GPSVelocity[GPSVelocity < 100]), col="red")
abline(lsfit(GPSVelocity[GPSVelocity < 100] , GPSVelocity[GPSVelocity < 100]), col="red")
par(mfrow= c(1,1))
plot(GPSVelocity[GPSVelocity < 100], data$speed[GPSVelocity < 100], ylab = "Velocity", xlab = "Velocity from GPS") 
abline(lsfit(GPSVelocity[GPSVelocity < 100] , GPSVelocity[GPSVelocity < 100]), col="red")
par(mfrow= c(1,1))
plot(GPSVelocity[GPSVelocity < 100], data$speed[GPSVelocity < 100], ylab = "Velocity", xlab = "Velocity from GPS") 
abline(lsfit(GPSVelocity[GPSVelocity < 100] , GPSVelocity[GPSVelocity < 100]), col="red")
diffVelocity = data$speed[GPSVelocity < 100] - GPSVelocity[GPSVelocity < 100]
plot(diffVelocity)
diffVelocity = data$speed[GPSVelocity < 100] - GPSVelocity[GPSVelocity < 100]
plot(diffVelocity)
plot(accuracy, diffVelocity)
plot(data$accuracy[GPSVelocity < 100], diffVelocity)
par(mfrow= c(1,1))
plot(GPSVelocity[GPSVelocity < 100], data$speed[GPSVelocity < 100], xlab = "Velocity", ylab = "Velocity from GPS") 
diffVelocity = data$speed[GPSVelocity < 100] - GPSVelocity[GPSVelocity < 100]
plot(diffVelocity)
plot(data$accuracy[GPSVelocity < 100][diffVelocity > -10], diffVelocity[diffVelocity > -10])
par(mfrow= c(1,2))
diffVelocity = data$speed[GPSVelocity < 100] - GPSVelocity[GPSVelocity < 100]
plot(data$accuracy[GPSVelocity < 100], diffVelocity)
plot(data$accuracy[GPSVelocity < 100][diffVelocity > -10], diffVelocity[diffVelocity > -10])
par(mfrow= c(1,1))
plot(GPSVelocity[GPSVelocity < 100], data$speed[GPSVelocity < 100], xlab = "Velocity", ylab = "Velocity from GPS") 
par(mfrow= c(1,2))
diffVelocity = data$speed[GPSVelocity < 100] - GPSVelocity[GPSVelocity < 100]
plot(data$accuracy[GPSVelocity < 100], diffVelocity)
plot(data$accuracy[GPSVelocity < 100][diffVelocity > -10], diffVelocity[diffVelocity > -10])
plot(diffVelocity / data$speed[GPSVelocity < 100])
plot(diffVelocity[diffVelocity > -10] / data$speed[GPSVelocity < 100][diffVelocity > -10])
plot(diffVelocity / data$speed[GPSVelocity < 100], data$accuracy[GPSVelocity < 100])
?plot 
plot.window(ylim = c(0, 20))
plot.window(xlim = c(-12,2)ylim = c(0, 20))
plot.window(xlim = c(-12,2), ylim = c(0, 20))
plot(diffVelocity / data$speed[GPSVelocity < 100], data$accuracy[GPSVelocity < 100])
plot.window(xlim = c(-12,2), ylim = c(0, 20))
cust  == plot.window(xlim = c(-12,2), ylim = c(0, 20))
cust  = plot.window(xlim = c(-12,2), ylim = c(0, 20))
plot(diffVelocity / data$speed[GPSVelocity < 100], data$accuracy[GPSVelocity < 100], asp = cust)
plot(diffVelocity / data$speed[GPSVelocity < 100], data$accuracy[GPSVelocity < 100], xlim = c(-12,2), ylim = c(0, 20))
plot(diffVelocity / data$speed[GPSVelocity < 100],  data$speed[GPSVelocity < 100])
plot(abs(diffVelocity / data$speed[GPSVelocity < 100]),  data$speed[GPSVelocity < 100])
par(mfrow= c(1,2))
plot(diffVelocity / data$speed[GPSVelocity < 100],  data$speed[GPSVelocity < 100])
plot(abs(diffVelocity / data$speed[GPSVelocity < 100]),  data$speed[GPSVelocity < 100])
par(mfrow= c(1,2))
plot(diffVelocity / GPSVelocity [GPSVelocity < 100],  GPSVelocity [GPSVelocity < 100])
plot(abs(diffVelocity / GPSVelocity[GPSVelocity < 100]),  GPSVelocity[GPSVelocity < 100])
par(mfrow= c(1,1))
plot(abs(diffVelocity / GPSVelocity[GPSVelocity < 100]),  accuracy[GPSVelocity < 100])
plot(abs(diffVelocity / GPSVelocity[GPSVelocity < 100]),  data$accuracy[GPSVelocity < 100])
plot(abs(diffVelocity / GPSVelocity[GPSVelocity < 100]),  data$accuracy[GPSVelocity < 100])
plot(abs(diffVelocity / GPSVelocity[GPSVelocity < 100]),  data$accuracy[GPSVelocity < 100], ylim = c(0,20))
plot(abs(diffVelocity / GPSVelocity[GPSVelocity < 100]),  data$accuracy[GPSVelocity < 100], ylim = c(0,20))
plot(data$accuracy)
data$accurcy[900]
data$accuracy[900]
index = list()
accuracyWOBlip = data$accuracy != 50 && GPSVelocity < 100
lapply(x, x +1)
dataWOBlip = list()
for (i in 1:length(data)) { dataWOBlip[[i]] = data[[i]][inclusionIndex]  }  
inclusionIndex = data$accuracy != 50 && GPSVelocity < 100
dataWOBlip = list()
for (i in 1:length(data)) { dataWOBlip[[i]] = data[[i]][inclusionIndex]  }  
inclusionIndex
dataWOBlip
dataWOBlip[[1]]
head(dataWOBlip)
plot(dataWOBlip[[1]])
plot(dataWOBlip[[2]])
plot(dataWOBlip[[6]])
plot(dataWOBlip[[5]])
inclusionInde
inclusionIndex
data$accuracy != 50
GPSVelocity < 100
inclusionIndex = data$accuracy != 50 & GPSVelocity < 100
inclusionIndex
inclusionIndex = data$accuracy != 50 & GPSVelocity < 100
dataWOBlip = list()
for (i in 1:length(data)) { dataWOBlip[[i]] = data[[i]][inclusionIndex]  }  
dataWOBlip
dataWOBlip[[1]]
dataWOBlip[[2]]
plot(dataWOBlip[[6]])
plot(dataWOBlip[[5]])
plot(dataWOBlip[[1]])
plot(dataWOBlip[[1]], dataWOBlip[[6]])
plot(dataWOBlip[[1]], dataWOBlip[[5]])
in.interval.lo(c(-1, 0, 1, 2), 0, 1)
in.interval.lo(NA, 1, 3)
interval
inInterval <- function(data, interval) { 
indexIn = data >= interval[1] & data < interval[2]
return(data[indexIn])
}
data[[1]]
plot(data[[1]])
inInterval(data[[1]], c(0,20))
plot(inInterval(data[[1]], c(0,20)))
inInterval <- function(data, interval) { 
indexIn = data >= interval[1] & data < interval[2]
return(data[indexIn])
}
NA > 1
NA > 2
inInterval <- function(data, interval) { 
indexIn = data >= interval[1] & data < interval[2]
return(data[indexIn])
}
q()
